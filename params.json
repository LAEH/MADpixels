{"name":"Madpixels","tagline":"","body":"MADpixels\r\n=========\r\n\r\n\r\n<img\r\n    style = \"float       : center;\r\n    \t\t   width \t\t: 1024px;\r\n         \tmargin      : 0px 10% 20px 0px;\r\n            box-shadow  : 0px 0px 5px #222\"\r\n    src =   \"assets/original.jpg\"\r\n/>\r\n\r\nInvert\r\n------\r\n\r\n``` Lua\r\n         function madpixels.transform.invert(args)\r\n            local args = args or {}\r\n            local img  = args.img or image.lena()\r\n            local imvertedImage = -img +1\r\n            return imvertedImage\r\n         end\r\n```\r\n\r\n<img\r\n    style = \"float      : center;\r\n            width       : 256px;\r\n            box-shadow  : 0px 0px 5px #222;\r\n            margin      : 0px 10% 20px 0px;\"\r\n    src =   \"assets/invert.jpg\"\r\n/>\r\n\r\nImage Bins Shuffle\r\n------------------\r\n\r\n``` Lua\r\nfunction madpixels.transform.binShuffle(args)\r\n   args = args or {}\r\n   local img = args.img or image.lena()\r\n   local imgh = args.imgh or 1024\r\n   local imgw = args.imgw or 1024\r\n   local img = image.scale(img,imgh,imgw)[{ {1,3} }]\r\n   local imgSize = #img\r\n   local wblocksNo = args.wblocksNo or 16\r\n   local hblocksNo = args.hblocksNo or 16\r\n   local totalBlocksNo = wblocksNo * hblocksNo\r\n   local blockw = imgSize[3] / wblocksNo\r\n   local blockh = imgSize[2] / hblocksNo\r\n   local blocks = img:unfold(3,blockw,blockw):unfold(2,blockh,blockh)\r\n   local allBlocks = blocks:reshape((#blocks)[1],\r\n                                    (#blocks)[2]*(#blocks)[3],\r\n                                    (#blocks)[4]*(#blocks)[5])\r\n   -- Generate Random posiiton & Randomize Bin Posiiton\r\n   local rdmPositions = torch.randperm((#allBlocks)[2])\r\n   for i = 1, (#allBlocks)[2] do\r\n      xlua.progress(i,(#allBlocks)[2])\r\n      allBlocks[{ 1,i }] = allBlocks[{ 1,rdmPositions[i] }]\r\n      allBlocks[{ 2,i }] = allBlocks[{ 2,rdmPositions[i] }]\r\n      allBlocks[{ 3,i }] = allBlocks[{ 3,rdmPositions[i] }]\r\n   end\r\n   local img = allBlocks:reshape((#blocks)[1],\r\n                                 (#blocks)[2],\r\n                                 (#blocks)[3],\r\n                                 (#blocks)[4],\r\n                                 (#blocks)[5])\r\n   local img = img:transpose(3,4):reshape(3,imgh,imgw)\r\n   return img\r\nend\r\n```\r\n<img\r\n    style = \"float      : center;\r\n            width       : 256px;\r\n            box-shadow  : 0px 0px 5px #222;\r\n            margin      : 0px 10% 20px 0px;\"\r\n    src =   \"assets/binsShuffle.jpg\"\r\n/>\r\n\r\n## Global pixels Shuffle\r\n***\r\n``` Lua\r\nfunction madpixels.transform.globalShuffle(args)\r\n   local args = args or {}\r\n   local img  = args.img or image.lena()\r\n   local imgh = args.imgh or 1024\r\n   local imgw = args.imgw or 1024\r\n   local img = image.scale(img,imgh,imgw)[{ {1,3} }]\r\n   local img = img:reshape(3, imgh*imgw):transpose(2,1)\r\n   local rdmi = torch.randperm((#img)[1])\r\n   local imgdest = img:clone()\r\n   for i = 1, (#img)[1] do imgdest[i] = img[rdmi[i]]end\r\n   local img = imgdest:transpose(2,1):reshape(3,imgh,imgh)\r\n   return img\r\nend\r\n```\r\n<img\r\n    style = \"float      : center;\r\n            width       : 256px;\r\n            box-shadow  : 0px 0px 5px #222;\r\n            margin      : 0px 10% 20px 0px;\"\r\n    src =   \"assets/globalShuffle.jpg\"\r\n/>\r\n\r\n## Bined Images Colors Shuffle\r\n***\r\n``` Lua\r\nfunction madpixels.transform.binedColorShuffle(args)\r\n   local args = args or {}\r\n   local img   = args.img or image.lena()\r\n   local imgh  = args.imgh or 1024\r\n   local imgw  = args.imgw or 1024\r\n   local imgc  = args.imgc or 3\r\n   local imgb  = args.imgb or 4 -- == 16 bins\r\n   local img   = image.scale(img,imgh,imgw)[{{1,3}}]\r\n   local img   = image.rgb2hsl(img)\r\n   local img   = img:reshape(3,imgh*imgw)\r\n   local img   = img:transpose(2,1)\r\n   local colors   = torch.Tensor(100,3)\r\n   for i = 1, 100 do\r\n      colors[{i}] = img[torch.random(1,imgh*imgw)]\r\n   end\r\n   local wblocksNo      = imgw / imgb\r\n   local hblocksNo      = imgh / imgb\r\n   local blockPixelsNo  = imgb * imgb\r\n   local totalBlocksNo  = wblocksNo * hblocksNo\r\n   local blocksHSL      = torch.Tensor(totalBlocksNo,blockPixelsNo,imgc)\r\n   for i = 1,(#blocksHSL)[1] do\r\n      xlua.progress(i,(#blocksHSL)[1])\r\n      local inHSL   = colors[floor(torch.uniform(1,(#colors)[1]+1))]\r\n      local ssclaor = torch.uniform(1,1)\r\n      local lscalor = torch.uniform(1,1)\r\n      for j = 1,(#blocksHSL)[2] do\r\n         blocksHSL[i][j][1] = 1\r\n         blocksHSL[i][j][2] = torch.uniform(1,1.5)\r\n         blocksHSL[i][j][3] = torch.uniform(0,1.5)\r\n         blocksHSL[i][j]:cmul(inHSL)\r\n      end\r\n   end\r\n   local img = blocksHSL:transpose(2,3)\r\n                        :transpose(1,2)\r\n                        :reshape(imgc,wblocksNo,hblocksNo,imgb,imgb)\r\n                        :transpose(3,4)\r\n                        :reshape(3,imgw,imgh)\r\n   local img = image.hsl2rgb(img)\r\n   return img\r\nend\r\n```\r\n<img\r\n    style = \"float      : center;\r\n            width       : 256px;\r\n            box-shadow  : 0px 0px 5px #222;\r\n            margin      : 0px 10% 20px 0px;\"\r\n    src =   \"assets/binedColorShuffle.jpg\"\r\n/>\r\n\r\n\r\n\r\n## Bined Images Pixels Shuffle\r\n==============================\r\n\r\n``` Lua\r\nfunction madpixels.transform.binedShuffle(args)\r\n   args = args or {}\r\n   local img       = args.img or image.lena()\r\n   local imgh      = args.imgh or 1024\r\n   local imgw      = args.imgw or 1024\r\n   local wblocksNo = args.wblocksNo or 16\r\n   local hblocksNo = args.hblocksNo or 16\r\n   local img     = image.scale(img,imgh,imgw)[{ {1,3} }]\r\n   local imgSize = #img\r\n   local imgHSL  = image.rgb2hsv(img) * 0.99\r\n   local blockw  = imgSize[3] / wblocksNo\r\n   local blockh  = imgSize[2] / hblocksNo\r\n   local blocks  = imgHSL:unfold(3,blockw,blockw):unfold(2,blockh,blockh)\r\n   local allBlocks= blocks:reshape((#blocks)[1],\r\n                                   (#blocks)[2]*(#blocks)[3],\r\n                                   (#blocks)[4]*(#blocks)[5])\r\n   for i = 1, (#allBlocks)[2] do\r\n      xlua.progress(i,(#allBlocks)[2])\r\n      local rdmPositions = torch.randperm((#allBlocks)[3]) --Randomize Bins\r\n      for j = 1, (#allBlocks)[3] do\r\n         allBlocks[{ 1,i,j }] = allBlocks[{ 1,i,rdmPositions[j] }]\r\n         allBlocks[{ 2,i,j }] = allBlocks[{ 2,i,rdmPositions[j] }]\r\n         allBlocks[{ 3,i,j }] = allBlocks[{ 3,i,rdmPositions[j] }]\r\n      end\r\n   end\r\n   -- reshape for output\r\n   local img = allBlocks:reshape((#blocks)[1],\r\n                                 (#blocks)[2],\r\n                                 (#blocks)[3],\r\n                                 (#blocks)[4],\r\n                                 (#blocks)[5])\r\n   local img = image.hsv2rgb(img:transpose(3,4):reshape(3,imgh,imgw))\r\n   return img\r\nend\r\n```\r\n\r\n<img\r\n    style = \"float      : center;\r\n            width       : 256px;\r\n            box-shadow  : 0px 0px 5px #222;\r\n            margin      : 0px 10% 20px 0px;\"\r\n    src =   \"assets/binedShuffle.jpg\"\r\n/>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}